// worker.js - Service Worker style
addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

function makeCorsHeaders() {
  return {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "GET, POST, PUT, PATCH, DELETE, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Requested-With",
  };
}

async function handleRequest(request) {
  const url = new URL(request.url);
  const pathname = url.pathname || '/';

  // Opciones CORS
  if (request.method === 'OPTIONS') {
    return new Response(null, {
      status: 204,
      headers: makeCorsHeaders(),
    });
  }

  // Queremos exponer rutas bajo /api/printful/*
  // Ej: /api/printful/products, /api/printful/orders/123
  const prefix = '/api/printful';
  if (!pathname.startsWith(prefix)) {
    return new Response(JSON.stringify({ error: 'Not found' }), {
      status: 404,
      headers: { 'Content-Type': 'application/json', ...makeCorsHeaders() },
    });
  }

  // Construimos el path que vamos a pedir a Printful
  const printfulPath = pathname.slice(prefix.length) || '/';
  const printfulUrl = `https://api.printful.com${printfulPath}${url.search}`;

  // Obtener API Key (configurarla en wrangler.toml [vars] o como secret)
  const API_KEY = globalThis.PRINTFUL_API_KEY || '';

  if (!API_KEY) {
    return new Response(JSON.stringify({ error: 'PRINTFUL_API_KEY not configured' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json', ...makeCorsHeaders() },
    });
  }

  // Prepare headers para Printful (Basic Auth: APIKEY:)
  const headers = new Headers(request.headers);
  // Eliminar host si viene
  headers.delete('host');
  headers.set('Authorization', 'Basic ' + btoa(`${API_KEY}:`));
  // Forzar accept JSON
  headers.set('Accept', 'application/json');

  // Reusar body si la request lo tiene (solo algunos métodos)
  const init = {
    method: request.method,
    headers,
    redirect: 'follow',
  };

  if (['POST','PUT','PATCH','DELETE'].includes(request.method.toUpperCase())) {
    init.body = await request.arrayBuffer();
  }

  try {
    const res = await fetch(printfulUrl, init);
    const contentType = res.headers.get('content-type') || '';
    const body = await res.arrayBuffer();

    // Pasamos status y headers (pero controlamos CORS y content-type)
    const responseHeaders = new Headers();
    // Copiar algunos headers útiles
    if (contentType) responseHeaders.set('Content-Type', contentType);
    responseHeaders.set('Access-Control-Allow-Origin', '*');
    responseHeaders.set('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');
    responseHeaders.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');

    return new Response(body, {
      status: res.status,
      headers: responseHeaders,
    });

  } catch (err) {
    return new Response(JSON.stringify({ error: 'proxy_error', message: err.message }), {
      status: 502,
      headers: { 'Content-Type': 'application/json', ...makeCorsHeaders() },
    });
  }
}